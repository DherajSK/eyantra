#!/usr/bin/env python

# ROS Node - Simple Action Client - Turtle

import rospy
import actionlib
import paho.mqtt.client as mqtt
import time

from pkg_task1.msg import msgTurtleAction  # Message Class that is used by ROS Actions externally
from pkg_task1.msg import msgTurtleGoal  # Message Class that is used for Goal messages

from pkg_ros_iot_bridge.msg import msgRosIotAction  # Message Class that is used by ROS Actions internally
from pkg_ros_iot_bridge.msg import msgRosIotGoal  # Message Class that is used for Goal Messages
from pkg_ros_iot_bridge.msg import msgRosIotResult  # Message Class that is used for Result Messages

from pkg_ros_iot_bridge.msg import msgMqttSub  # Message Class for MQTT Subscription Messages

done = False
broker_url = "broker.mqttdashboard.com"
broker_port = 1883
pub_message = ""
pub_topic = "eyrc/aBlostcD/ros_to_iot"
pub_client = mqtt.Client()
pub_client.connect(broker_url, broker_port)


class RosIotBridgeActionClient:

    # Constructor
    def __init__(self):

        # Initialize Action Client
        self._ac = actionlib.ActionClient('/action_ros_iot',
                                          msgRosIotAction)

        # Dictionary to Store all the goal handels
        self._goal_handles = {}

        # Store the MQTT Topic on which to Publish in a variable
        param_config_pyiot = rospy.get_param('config_pyiot')
        self._config_mqtt_pub_topic = param_config_pyiot['mqtt']['topic_pub']

        # Wait for Action Server that will use the action - '/action_ros_iot' to start
        self._ac.wait_for_server()
        rospy.loginfo("Action server up, we can send goals.")

    # This function will be called when there is a change of state in the Action Client State Machine
    def on_transition(self, goal_handle):

        # from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.

        result = msgRosIotResult()

        index = 0
        for i in self._goal_handles:
            if self._goal_handles[i] == goal_handle:
                index = i
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(index))
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)
            # removed(.... == True) from below if expression to make it pep8 correct
            if result.flag_success:
                rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))

    # This function is used to send Goals to Action Server
    def send_goal(self, arg_protocol, arg_mode, arg_topic, arg_message):
        # Create a Goal Message object
        goal = msgRosIotGoal()

        goal.protocol = arg_protocol
        goal.mode = arg_mode
        goal.topic = arg_topic
        goal.message = arg_message

        rospy.loginfo("Send goal.")

        # self.on_transition - It is a function pointer to a function which will be called when 
        #                       there is a change of state in the Action Client State Machine
        goal_handle = self._ac.send_goal(goal,
                                         self.on_transition,
                                         None)

        return goal_handle


class SimpleActionClientTurtle:

    # Constructor
    def __init__(self):
        self._ac = actionlib.SimpleActionClient('/action_turtle', msgTurtleAction)
        self._ac.wait_for_server()

        rospy.loginfo("Action server is up, we can send new goals!")

    # Function to send Goals to Action Servers
    def send_goal(self, arg_dis, arg_angle):
        # Create Goal message for Simple Action Server
        goal = msgTurtleGoal(distance=arg_dis, angle=arg_angle)

        '''
            * done_cb is set to the function pointer of the function which should be called once 
                the Goal is processed by the Simple Action Server.

            * feedback_cb is set to the function pointer of the function which should be called while
                the goal is being processed by the Simple Action Server.
        '''

        self._ac.send_goal(goal, done_cb=self.done_callback, feedback_cb=self.feedback_callback)

        rospy.loginfo("Goal has been sent.")

        self._ac.wait_for_result()

    # Function print result on Goal completion
    def done_callback(self, status, result):
        action_client = RosIotBridgeActionClient()
        rospy.loginfo("Status is : " + str(status))
        rospy.loginfo("Result is : " + str(result))
        pub_msg = (result.final_x, result.final_y, result.final_theta)
        pub_message = str(pub_msg)
        pub_client.publish(topic=pub_topic, payload=pub_message, qos=0, retain=False)
        goal_message = "[turtle_data: ]" + pub_message
        goal_handle1 = action_client.send_goal("mqtt", "sub", pub_topic, goal_message)
        action_client._goal_handles[pub_message] = goal_handle1

    # Function to print feedback while Goal is being processed
    def feedback_callback(self, feedback):
        rospy.loginfo(feedback)


def msg_callback(msg):
    global done
    if msg.message == "start" and (not done):
        # Create a object for Simple Action Client.
        obj_client = SimpleActionClientTurtle()

        # Send Goals to Draw a Hexagon
        obj_client.send_goal(2, 0)
        rospy.sleep(3)

        obj_client.send_goal(2, 60)
        rospy.sleep(3)

        obj_client.send_goal(2, 60)
        rospy.sleep(3)
        obj_client.send_goal(2, 60)
        rospy.sleep(3)

        obj_client.send_goal(2, 60)
        rospy.sleep(3)

        obj_client.send_goal(2, 60)
        done = True


# Main Function
def main():
    # Initialize ROS Node
    rospy.init_node('node_simple_action_client_turtle')
    action_client = RosIotBridgeActionClient()
    print(
        "-------------------------------------------------- "
        "\n\nHiveMQ Subcribe to topic: [eyrc/aBlostcD/ros_to_iot]\n\nPublish [start] "
        "to topic:  [eyrc/aBlostcD/iot_to_ros]\n\n-------------------------------------------------- ")

    rospy.Subscriber("/ros_iot_bridge/mqtt/sub", msgMqttSub, msg_callback)

    rospy.spin()


if __name__ == '__main__':
    main()
